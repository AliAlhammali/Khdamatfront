{"version":3,"file":"auth.serviceProvider.store-CZK-wxkT.js","sources":["../../src/services/serviceProvider/auth/auth.serviceProvider.service.js","../../src/stores/serviceProvider/auth/auth.serviceProvider.store.js"],"sourcesContent":["import ApiClient from \"@/helper/api.helper\";\r\n\r\nclass AuthAdmin extends ApiClient {\r\n  constructor() {\r\n    super(\"sp-auth\");\r\n  }\r\n\r\n  login(data) {\r\n    return axios.post(`${this.url}/login`, data);\r\n  }\r\n\r\n  logout() {\r\n    return axios.post(`${this.url}/logout`);\r\n  }\r\n}\r\n\r\nexport default new AuthAdmin();\r\n","import { defineStore } from \"pinia\";\r\nimport router from \"@/router\";\r\nimport authServiceProviderService from \"@/services/serviceProvider/auth/auth.serviceProvider.service\";\r\n\r\nexport const useAuthServiceProviderStore = defineStore(\"AuthServiceProvider\", {\r\n  state: () => ({\r\n    record: null,\r\n    isLoading: false,\r\n  }),\r\n  getters: {},\r\n  actions: {\r\n    loginServiceProvider: async function(user) {\r\n      this.isLoading = true;\r\n      try {\r\n        const { data } = await authServiceProviderService.login(user);\r\n        this.record = data.user;\r\n        // Save token to cookies\r\n        $cookies.set(\"service_provider_khadamat_token\", data.token, \"1m\");\r\n        $cookies.set(\"service_provider_khadamat_user\", data.user, \"1m\");\r\n\r\n        router.push({ name: \"service-provider-dashboard\" });\r\n      } catch (error) {\r\n        return false;\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    logoutServiceProvider: async function() {\r\n      try {\r\n        // Remove token from cookies\r\n        $cookies.remove(\"service_provider_khadamat_token\");\r\n        $cookies.remove(\"service_provider_khadamat_user\");\r\n\r\n        this.record = null;\r\n        router.push({ name: \"service-provider-login\" });\r\n        await authServiceProviderService.logout();\r\n\r\n        window.location.reload();\r\n      } catch (error) {\r\n        return error;\r\n      }\r\n    },\r\n\r\n    checkCookie: function() {\r\n      const token = $cookies.get(\"service_provider_khadamat_token\");\r\n      const user = $cookies.get(\"service_provider_khadamat_user\");\r\n\r\n      if (token && user) {\r\n        this.record = user;\r\n      } else {\r\n        router.push({ name: \"service-provider-login\" });\r\n      }\r\n    },\r\n  },\r\n});\r\n"],"names":["AuthAdmin","ApiClient","data","authServiceProviderService","useAuthServiceProviderStore","defineStore","user","router","error","token"],"mappings":"4FAEA,MAAMA,UAAkBC,CAAU,CAChC,aAAc,CACZ,MAAM,SAAS,CAChB,CAED,MAAMC,EAAM,CACV,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,SAAUA,CAAI,CAC5C,CAED,QAAS,CACP,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,SAAS,CACvC,CACH,CAEA,MAAeC,EAAA,IAAIH,ECZNI,EAA8BC,EAAY,sBAAuB,CAC5E,MAAO,KAAO,CACZ,OAAQ,KACR,UAAW,EACf,GACE,QAAS,CAAE,EACX,QAAS,CACP,qBAAsB,eAAeC,EAAM,CACzC,KAAK,UAAY,GACjB,GAAI,CACF,KAAM,CAAE,KAAAJ,CAAI,EAAK,MAAMC,EAA2B,MAAMG,CAAI,EAC5D,KAAK,OAASJ,EAAK,KAEnB,SAAS,IAAI,kCAAmCA,EAAK,MAAO,IAAI,EAChE,SAAS,IAAI,iCAAkCA,EAAK,KAAM,IAAI,EAE9DK,EAAO,KAAK,CAAE,KAAM,4BAA8B,CAAA,CACnD,MAAe,CACd,MAAO,EACf,QAAgB,CACR,KAAK,UAAY,EAClB,CACF,EAED,sBAAuB,gBAAiB,CACtC,GAAI,CAEF,SAAS,OAAO,iCAAiC,EACjD,SAAS,OAAO,gCAAgC,EAEhD,KAAK,OAAS,KACdA,EAAO,KAAK,CAAE,KAAM,wBAA0B,CAAA,EAC9C,MAAMJ,EAA2B,SAEjC,OAAO,SAAS,QACjB,OAAQK,EAAO,CACd,OAAOA,CACR,CACF,EAED,YAAa,UAAW,CACtB,MAAMC,EAAQ,SAAS,IAAI,iCAAiC,EACtDH,EAAO,SAAS,IAAI,gCAAgC,EAEtDG,GAASH,EACX,KAAK,OAASA,EAEdC,EAAO,KAAK,CAAE,KAAM,wBAA0B,CAAA,CAEjD,CACF,CACH,CAAC"}